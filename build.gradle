import org.apache.tools.ant.filters.ReplaceTokens

plugins {
    id 'java'
	id 'eclipse'
    id 'com.gradleup.shadow' version '8.3.5'
    id 'com.palantir.git-version' version '0.13.0'
}

group = 'net.coreprotect'

def projectVersion = '22.4'
def projectBranch = ''
version = projectVersion
description = 'Provides block protection for your server.'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

logger.info "Building version $version"

repositories {
    maven { url 'https://hub.spigotmc.org/nexus/content/groups/public' }
    maven { url 'https://repo.papermc.io/repository/maven-public' }
    maven { url 'https://repo.codemc.org/repository/maven-public' }
    maven { url 'https://maven.enginehub.org/repo' }
}

dependencies {
    implementation platform('com.intellectualsites.bom:bom-newest:1.45')
    compileOnly 'io.papermc.paper:paper-api:1.19-R0.1-SNAPSHOT'
    compileOnly 'com.sk89q.worldedit:worldedit-bukkit:7.3.0-SNAPSHOT'
    implementation 'com.zaxxer:HikariCP:5.0.1'
    implementation 'com.github.oshi:oshi-core:6.6.5'
}

jar {
    archiveClassifier.set('original')
}

artifacts {
    add('archives', tasks.shadowJar)
}

shadowJar {
    dependencies {
        // #toString because #getGroup technically returns an Object
        relocate 'com.zaxxer', project.group.toString()
        exclude dependency('com.google.code.gson:.*')
        exclude dependency('org.intellij:.*')
        exclude dependency('org.jetbrains:.*')
        exclude dependency('org.slf4j:.*')
    }
    archiveClassifier.set(null)
}

ext.author = 'Intelli'
ext.resourceTokens = [
        'project.version': projectVersion,
        'project.branch' : projectBranch
]

processResources {
    include 'plugin.yml'
    // Whole lotta boilerplate to get the same functionality as Maven here.
    // Replace this if Gradle ever lets us configure the filter before filtering.
    filter(new Transformer<String, String>() {
        @Override
        String transform(String s) {
            ReplaceTokens replaceTokens = new ReplaceTokens(new StringReader(s))
            replaceTokens.setBeginToken('${')
            replaceTokens.setEndToken('}')
            resourceTokens.forEach { key, val ->
                def token = new ReplaceTokens.Token()
                token.setKey(key.toString())
                token.setValue(val.toString())
                replaceTokens.addConfiguredToken(token)
            }
            return replaceTokens.readLines().join('\n')
        }
    })
}
